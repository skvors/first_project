
Паттерн проектирования «Обёртка» (Wrapper или Decorator) –
это довольно простой и удобный механизм расширения функциональности объектов без использования наследования.

//18 уровень, 6 лекция

Если мы хотим «обернуть» вызовы методов какого-то объекта своим кодом, то нам нужно:

1) Создать свой класс-обертку и унаследоваться от того же класса/интерфейса что и оборачиваемый объект.

2) Передать оборачиваемый объект в конструктор нашего класса.

3) Переопределить все методы в нашем новом классе, и вызвать в них методы оборачиваемого объекта.

4) Внести свои изменения «по вкусу»: менять результаты вызовов, параметры или делать что-то еще.

-------------------------------------------------------
/*
AmigoOutputStream

1 Измени класс AmigoOutputStream так, чтобы он стал Wrapper-ом для класса FileOutputStream. Используй наследование.
2 При вызове метода close() должны выполняться следующая последовательность действий:
2.1 Вызвать метод flush().
2.2 Дописать следующий текст «JavaRush © All rights reserved.«, используй метод getBytes().
2.3 Закрыть поток методом close().
*/

public class AmigoOutputStream extends FileOutputStream
{
    public static String fileName = "C:/tmp/result.txt";
    FileOutputStream original;

    public AmigoOutputStream(FileOutputStream original) throws FileNotFoundException
    {
        super(fileName);
        this.original = original;
    }

    @Override
    public void flush() throws IOException {
        original.flush();
    }

    @Override
    public void write(byte[] b) throws IOException {
       original.write(b);
    }

    @Override
    public void write(int b) throws IOException {
        original.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        original.write(b, off,len);
    }

    @Override
    public void close() throws IOException
    {
        original.flush();
        String str = "JavaRush © All rights reserved.";
        original.write(str.getBytes());
        original.close();
    }

    public static void main(String[] args) throws FileNotFoundException {
        new AmigoOutputStream(new FileOutputStream(fileName));
    }
}

------------------------------------------------------------------