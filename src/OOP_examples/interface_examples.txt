
/*
Пиво и кола
*/

public class Solution {
    public static void main(String[] args) throws Exception {
        print(new Beer());
        print(new Cola());
    }

    private static void print(Drink drink)     //здесь в качестве аргумента может выступать объект такого типа, который унаследован(реализовавший его) от Drink
    {
        System.out.println(drink.getClass().getSimpleName());   //интересный метод печает название класса типом которого является
    }

    public interface Drink {
        boolean isAlcoholic();
    }

    public static class Beer implements Drink
    {
        public boolean isAlcoholic()
        {
            return true;
        }
    }

    public static class Cola implements Drink
    {
        public boolean isAlcoholic()
        {
            return false;
        }
    }
}

--------------------------------------------------
/*
Selectable и Updatable
Создай класс Screen и реализуй в нем интерфейсы Selectable и Updatable.
Не забудь реализовать методы!
*/

public class Solution {
    public static void main(String[] args) throws Exception {
    }

    interface Selectable {
        void onSelect();
    }

    interface Updatable {
        void refresh();
    }

    //напишите тут ваш класс
    public class Screen implements Selectable, Updatable
    {
        @Override                                         //желательно всегда ее писать при переопределении метода
        public void onSelect() {
        }

        @Override
        public void refresh() {
        }
    }
}

--------------------------------------------------

/*
   Баг в initializeIdAndName
1. Подумать, что в программе неправильно.
2. Вынести реализацию метода initializeIdAndName в класс User.
3. initializeIdAndName в классе User должен возвращать тип User.
4. Поправить программу, чтобы компилировалась и работала.
*/

public class Solution {
    public static void main(String[] args) throws Exception {
        System.out.println(Matrix.NEO);
        System.out.println(Matrix.TRINITY);
    }

    static class Matrix {
        public static User NEO = new User().initializeIdAndName(1, "Neo");
        public static User TRINITY = new User().initializeIdAndName(2, "Trinity");
    }

    interface DBObject {
        User initializeIdAndName(long id, String name);
    }

    static class User implements DBObject
    {
        long id;
        String name;

        @Override
        public String toString() {
            return String.format("User has name %s, id = %d", name, id);
        }

        @Override
        public User initializeIdAndName(long id, String name)  //интересный метод, он инициализирует поля и возвращает объект вызвавший его
        {
            this.id = id;
            this.name = name;
            return this;
        }
    }
}

--------------------------------------------------

/*
Параметризованый интерфейс
В классе StringObject реализуй интерфейс SimpleObject с параметром типа String.
*/

public class Solution {
    public static void main(String[] args) throws Exception {
    }

    interface SimpleObject<T> {
        SimpleObject<T> getInstance();
    }

    class StringObject implements SimpleObject<String> //допишите здесь ваш код
    {
        @Override
        public SimpleObject<String> getInstance() {
            return null;
        }
    }
}

--------------------------------------------------



--------------------------------------------------



--------------------------------------------------



--------------------------------------------------